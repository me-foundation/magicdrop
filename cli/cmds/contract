#!/usr/bin/env bash

# Set BASE_DIR to the directory where this script is located
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Ensure the path to the utils script is correct and the file exists
source "$BASE_DIR/utils"
source "$BASE_DIR/common"
trap "echo 'Exiting...'; exit 1" SIGINT

deploy_contract() {
    trap "echo 'Exiting...'; exit 1" SIGINT
    clear 

    title="Deploy a new collection"

    set_chain
    set_token_standard
    set_collection_name
    set_collection_symbol
    set_contract_owner
    set_impl_id

    print_signer_with_balance $chain_id
    confirm_deployment

    create_contract_selector="createContract(string,string,uint8,address,uint32)"
    factory_address="0x000073735DD587b1e5d3E84025A1145e110D4684"
    password=$(get_password_if_set)

    echo "Deploying contract... this may take a minute."
    echo ""

    output=$(cast send \
        --rpc-url "$RPC_URL" \
        --chain-id $chain_id \
        $factory_address \
        "$create_contract_selector" \
        "$name" \
        "$symbol" \
        "$standard_id" \
        "$initial_owner" \
        $impl_id \
        $password \
        --json)

    print_transaction_hash

    sig_event=$(cast sig-event "NewContractInitialized(address,address,uint32,uint8,string,string)")
    event_data=$(get_contract_address_from_logs "$output" "$sig_event")
    chunks=($(echo "$event_data" | fold -w64))
    contract_address=$(decode_address "${chunks[0]}")

    echo "Deployed Contract Address: $contract_address"
    echo $(format_explorer_contract_url $chain_id $contract_address)
    echo ""
    save_deployment_data $chain_id $contract_address $name $symbol $token_standard $initial_owner $impl_id
    echo ""

    # ask if they would like to setup the contract now
    if gum confirm "Would you like to setup the contract?"; then
        setup_contract "$contract_address" "$chain_id" "$token_standard" "$initial_owner"
    fi
}

setup_contract() {
    clear 
    trap "echo 'Exiting...'; exit 1" SIGINT

    local deployed_contract_address="$1"
    local chain_id="$2"
    local token_standard="$3"
    local initial_owner="$4"
    title="Setup an existing collection"

    set_chain
    set_contract_address
    set_token_standard
    set_max_supply
    set_global_wallet_limit
    set_mint_currency
    set_royalties
    set_stages_file
    set_fund_receiver
    print_signer_with_balance $chain_id
    confirm_setup

    echo "Processing stages file... this will take a moment."
    process_stages "$stages_file" "stagesInput.tmp"
    stages_data=$(cat "stagesInput.tmp")
    rm "stagesInput.tmp"
    echo ""

    password=$(get_password_if_set)
    setup_selector="setup(uint256,uint256,address,address,(uint80,uint80,uint32,bytes32,uint24,uint256,uint256)[],address,uint96)"

    echo "Setting up contract... this will take a moment."

    output=$(cast send $contract_address \
        "$setup_selector" \
        $max_supply \
        $wallet_limit \
        $mint_currency \
        $fund_receiver \
        "$stages_data" \
        $royalty_receiver \
        $royalty_fee \
        $password \
        --chain-id $chain_id \
        --rpc-url "$RPC_URL" \
        --json)

    print_transaction_hash
}

set_base_uri() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set Base URI"

    set_contract_address
    set_chain
    set_base_uri

    print_signer_with_balance $chain_id
    confirm_set_base_uri

    base_uri_selector="setBaseURI(string)"
    password=$(get_password_if_set)
    
    echo "Setting base URI... this will take a moment."

    output=$(cast send $contract_address \
        $base_uri_selector \
        $base_uri \
        $password \
        --chain-id $chain_id \
        --rpc-url "$RPC_URL" \
        --json)

    print_transaction_hash
}

set_global_wallet_limit() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set Global Wallet Limit"

    set_contract_address
    set_chain
    set_global_wallet_limit

    print_signer_with_balance $chain_id
    confirm_set_global_wallet_limit

    global_wallet_limit_selector="setGlobalWalletLimit(uint256)"
    password=$(get_password_if_set)

    echo "Setting global wallet limit... this will take a moment."

    output=$(cast send $contract_address \
        $global_wallet_limit_selector \
        $global_wallet_limit \
        $password \
        --chain-id $chain_id \
        --rpc-url "$RPC_URL" \
        --json)

    print_transaction_hash
}

set_max_mintable_supply() {
    trap "echo 'Exiting...'; exit 1" SIGINT
    clear

    title="Set Max Mintable Supply"

    set_chain
    set_contract_address
    set_max_mintable_supply

    echo ""
    echo "You are about to set the max mintable supply of $(format_address $contract_address) to $max_mintable_supply"
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        set_max_mintable_supply_selector="setMaxMintableSupply(uint256)"
        password=$(get_password_if_set)

        echo "Setting max mintable supply... this will take a moment."

        output=$(cast send $contract_address \
            $set_max_mintable_supply_selector \
            $max_mintable_supply \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Set max mintable supply cancelled."
        echo ""
    fi
}

set_mintable() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set Mintable"

    set_chain
    set_contract_address
    set_token_standard
    set_mintable

    echo ""
    echo "You are about to set the mintable status of $(format_address $contract_address) to $mintable"
    echo ""

    if gum confirm "Do you want to proceed?"; then
        set_mintable_selector="setMintable(bool)"
        password=$(get_password_if_set)

        echo "Setting mintable... this will take a moment."

        output=$(cast send $contract_address \
            $set_mintable_selector \
            $mintable \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Set mintable cancelled."
        echo ""
    fi
}

set_stages() {
    trap "echo 'Exiting...'; exit 1" SIGINT
    clear 

    title="Set Stages"

    set_chain
    set_contract_address
    set_token_standard
    set_stages_file

    process_stages "$stages_file" "stagesInput.tmp"
    stages_data=$(cat "stagesInput.tmp")
    rm "stagesInput.tmp"

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        set_stages_selector="setStages((uint80,uint80,uint32,bytes32,uint24,uint256,uint256)[])"
        password=$(get_password_if_set)

        echo "Setting stages... this will take a moment."

        output=$(cast send $deployed_contract_address \
            "$set_stages_selector" \
            "$stages_data" \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)
        
        print_transaction_hash
    else
        echo "Set stages cancelled."
        echo ""
    fi
}

set_cosigner() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set Cosigner"

    set_chain
    set_contract_address
    set_cosigner_address

    echo ""
    echo "You are about to set the cosigner of $(format_address $contract_address) to $(format_address $cosigner)"
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        set_cosigner_selector="setCosigner(address)"
        password=$(get_password_if_set)

        echo "Setting cosigner... this will take a moment."

        output=$(cast send $contract_address \
            $set_cosigner_selector \
            $cosigner \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Set cosigner cancelled."
        echo ""
    fi
}

set_timestamp_expiry() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set Timestamp Expiry"

    set_chain
    set_contract_address
    set_timestamp_expiry

    echo ""
    echo "You are about to set the timestamp expiry of $(format_address $contract_address) to $timestamp_expiry seconds."
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        timestamp_expiry_selector="setTimestampExpirySeconds(uint256)"
        password=$(get_password_if_set)

        echo "Setting timestamp expiry... this will take a moment."

        output=$(cast send $contract_address \
            $timestamp_expiry_selector \
            $timestamp_expiry \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Timestamp expiry cancelled."
        echo ""
    fi
}

transfer_ownership() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Complete Ownership Handover"

    echo ""
    echo "Notice: In order to transfer ownership, the next owner must call 'requestOwnershipTransfer(address)' on the contract."
    echo "This request will expire in 48 hours. Once expired, the request can be made again by the new owner."
    echo "After the request is made, the current owner can proceed with this action."
    echo ""

    if ! gum confirm "Do you want to proceed?"; then
        echo "Exiting..."
        exit 1
    fi

    set_chain
    set_contract_address
    set_new_owner
    
    echo ""
    echo "You are about to transfer ownership of $(format_address $contract_address) to $(format_address $new_owner)"
    echo "This action cannot be undone."
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        complete_ownership_handover_selector="completeOwnershipHandover(address)"
        password=$(get_password_if_set)

        echo "Completing ownership handover... this will take a moment."

        output=$(cast send $contract_address \
            $complete_ownership_handover_selector \
            $new_owner \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Transfer ownership cancelled."
        echo ""
    fi
}

set_token_uri_suffix() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT
    title="Set Token URI Suffix"

    set_chain
    set_contract_address
    set_token_uri_suffix

    print_signer_with_balance $chain_id
    confirm_set_token_uri_suffix

    token_uri_suffix_selector="setTokenURISuffix(string)"
    password=$(get_password_if_set)

    echo "Setting token URI suffix... this will take a moment."

    output=$(cast send $contract_address \
        $token_uri_suffix_selector \
        $token_uri_suffix \
        $password \
        --chain-id $chain_id \
        --rpc-url "$RPC_URL" \
        --json)

    print_transaction_hash
}

set_uri() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set URI (ERC1155 Only)"

    set_contract_address
    set_1155_uri

    echo ""
    echo "You are about to set the URI of $(format_address $contract_address) to $uri"
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        set_uri_selector="setURI(string)"
        password=$(get_password_if_set)

        echo "Setting URI... this will take a moment."

        output=$(cast send $contract_address \
            $set_uri_selector \
            $uri \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Set URI cancelled."
        echo ""
    fi
}

set_royalties() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set Royalties"

    echo ""
    echo "Notice: This only works for contracts that implement the ERC2981 standard."
    echo "Newer versions of ERC721M and ERC1155M support this out of the box."
    echo ""

    set_chain
    set_contract_address
    set_receiver_address
    set_fee_numerator
    
    echo ""
    percentage=$(echo "scale=2; $fee_numerator / 100" | bc)
    echo "You are about to set the royalties of $(format_address $contract_address) to $(format_address $receiver) with a fee numerator of $fee_numerator ($percentage%)"
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        set_royalties_selector="setDefaultRoyalty(address,uint96)"
        password=$(get_password_if_set)

        echo "Setting royalties... this will take a moment."

        output=$(cast send $contract_address \
            $set_royalties_selector \
            $receiver \
            $fee_numerator \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Set royalties cancelled."
        echo ""
    fi
}

owner_mint() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Owner Mint"

    set_chain
    set_contract_address
    set_token_standard
    set_recipient_address
    set_quantity

    token_id=""
    mint_selector="ownerMint(uint32,address)" # ERC721 mint(to, quantity)
    mint_args="$quantity $recipient"

    if [ "$token_standard" == "ERC1155" ]; then
        token_id=$(get_numeric_input "Enter token ID")
        check_input "$token_id" "token ID"
        clear
        mint_selector="ownerMint(address,uint256,uint32)" # ERC1155 mint(to, tokenId, quantity)
        mint_args="$recipient $token_id $quantity"
    fi

    echo ""
    echo "You are about to mint $quantity token(s) to $(format_address $recipient)"
    echo ""

    if gum confirm "Do you want to proceed?"; then
        password=$(get_password_if_set)

        echo "Minting tokens... this will take a moment."

        output=$(cast send $contract_address \
            "$mint_selector" \
            $mint_args \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Owner Mint cancelled."
        echo ""
    fi
}

send_erc721_batch() {
    echo "Not implemented, please use the hardhat script instead."
}

manage_authorized_minters() {
    clear
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Manage Authorized Minters"

    set_chain
    set_contract_address

    show_title "$title" "> Choose an action <"
    action=$(gum choose "Add Authorized Minter" "Remove Authorized Minter")
    clear

    set_authorized_minter

    if [ "$action" == "Add Authorized Minter" ]; then
        add_authorized_minter $contract_address $minter $chain_id
    else
        remove_authorized_minter $contract_address $minter $chain_id
    fi
}

add_authorized_minter() {
    contract_address=$1
    minter=$2
    chain_id=$3

    password=$(get_password_if_set)
    add_authorized_minter_selector="addAuthorizedMinter(address)"

    echo ""
    echo "You are about to add $(format_address $minter) as an authorized minter of $(format_address $contract_address)"
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        echo "Adding authorized minter... this will take a moment."

        output=$(cast send $contract_address \
            "$add_authorized_minter_selector" \
            $minter \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Add authorized minter cancelled."
        echo ""
    fi
}

remove_authorized_minter() {
    contract_address=$1
    minter=$2
    chain_id=$3

    password=$(get_password_if_set)
    remove_authorized_minter_selector="removeAuthorizedMinter(address)"

    echo ""
    echo "You are about to remove $(format_address $minter) as an authorized minter of $(format_address $contract_address)"
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        echo "Removing authorized minter... this will take a moment."

        output=$(cast send $contract_address \
            "$remove_authorized_minter_selector" \
            $minter \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
        --json)

        print_transaction_hash
    else
        echo "Remove authorized minter cancelled."
        echo ""
    fi
}

set_cosigner() {
    trap "echo 'Exiting...'; exit 1" SIGINT

    title="Set Cosigner"

    set_chain
    set_contract_address
    set_cosigner_address

    password=$(get_password_if_set)
    set_cosigner_selector="setCosigner(address)"

    echo ""
    echo "You are about to set the cosigner of $(format_address $contract_address) to $(format_address $cosigner)"
    echo ""

    print_signer_with_balance $chain_id

    if gum confirm "Do you want to proceed?"; then
        echo "Setting cosigner... this will take a moment."

        output=$(cast send $contract_address \
            "$set_cosigner_selector" \
            $cosigner \
            $password \
            --chain-id $chain_id \
            --rpc-url "$RPC_URL" \
            --json)

        print_transaction_hash
    else
        echo "Set cosigner cancelled."
        echo ""
    fi
}


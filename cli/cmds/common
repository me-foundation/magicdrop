#!/usr/bin/env bash

set_contract_address() {
    if [ -z "$contract_address" ]; then
        show_title "$title" "> Enter contract address <"
        contract_address=$(get_ethereum_address "Enter contract address")
        check_input "$contract_address" "contract address"
        clear
    fi
}

set_fund_receiver() {
    if [ -z "$fund_receiver" ]; then
        show_title "$title" "> Set fund receiver <"
        if gum confirm "Override fund receiver? (default: $(format_address $SIGNER))" --default=false; then
            fund_receiver=$(get_ethereum_address "Fund receiver (eg: 0x000...000)")
        else
            fund_receiver=$SIGNER
        fi
        clear
    fi
}

set_royalties() {
    if [ -z "$royalty_receiver" ]; then
        show_title "$title" "> Do you want to set royalties? <"
        if gum confirm "Use royalties?" --default=false; then
            # Set royalty receiver
            show_title "$title" "> Set royalty receiver <"
            royalty_receiver=$(get_ethereum_address "Enter royalty receiver address")
            royalty_receiver=${royalty_receiver:-"N/A"}
            clear

            # Set royalty fee numerator
            show_title "$title" "> Set royalty fee numerator <"
            royalty_fee=$(get_numeric_input "Enter royalty fee numerator (e.g., 500 for 5%)")
            royalty_fee=${royalty_fee:-"N/A"}
        else 
            royalty_receiver=$DEFAULT_ROYALTY_RECEIVER
            royalty_fee=$DEFAULT_ROYALTY_FEE
        fi
        clear
    fi
}

set_stages_file() {
    if [ -z "$stages_file" ]; then
        show_title "$title" "> Set stages file <"
        stages_file=$(get_collection_file "Enter stages JSON file")
        clear
    fi
}

set_mint_currency() {
    if [ -z "$mint_currency" ]; then
        show_title "$title" "> Set mint currency <"
        mint_currency=$(get_ethereum_address "Mint currency (default: Native Gas Token)")
        clear
    else 
        mint_currency=$DEFAULT_MINT_CURRENCY
    fi
}

set_global_wallet_limit() {
    if [ -z "$global_wallet_limit" ]; then
        show_title "$title" "> Set global wallet limit <"
        global_wallet_limit=$(get_numeric_input "Enter global wallet limit (0 for no limit)")
        check_input "$global_wallet_limit" "global wallet limit"
        clear
    else 
        global_wallet_limit=0
    fi
}

set_max_supply() {
    if [ -z "$max_supply" ]; then
        show_title "$title" "> Set max supply (collection size) <"
        max_supply=$(get_numeric_input "Enter max supply")
        check_input "$max_supply" "max supply"
        clear
    fi
}

set_max_mintable_supply() {
    if [ -z "$max_mintable_supply" ]; then
        show_title "$title" "> Set max mintable supply <"
        max_mintable_supply=$(get_numeric_input "Enter max mintable supply")
        check_input "$max_mintable_supply" "max mintable supply"
        clear
    fi
}

set_token_standard() {
    if [ -z "$token_standard" ]; then
        show_title "$title" "> Set token standard <"
        token_standard=$(gum choose "ERC721" "ERC1155")
        clear
    fi
}

set_chain() {
    if [ -z "$chain_id" ]; then
        show_title "$title" "> Choose a chain to deploy on <"
        chain=$(printf "%s\n" "${SUPPORTED_CHAINS[@]}" | cut -d':' -f2 | gum choose)
        # Extract the chain ID based on the selected chain name
        chain_id=$(printf "%s\n" "${SUPPORTED_CHAINS[@]}" | grep "$chain" | cut -d':' -f1)
        set_rpc_url $chain_id
        clear
    fi
}

set_base_uri() {
    if [ -z "$base_uri" ]; then
        show_title "$title" "> Enter the base URI <"
        base_uri=$(gum input --placeholder "Enter base URI")
        check_input "$base_uri" "base URI"
        clear
    fi
}

set_collection_name() {
    show_title "$title" "> Enter the collection name <"
    name=$(gum input --placeholder "Enter collection name")
    check_input "$name" "name"
    clear
}

set_collection_symbol() {
    show_title "$title" "> Enter the collection symbol <"
    symbol=$(gum input --placeholder "Enter collection symbol")
    check_input "$symbol" "symbol"
    clear
}

set_contract_owner() {
    show_title "$title" "> Set initial contract owner <"
    if gum confirm "Override initial contract owner? ($(format_address $SIGNER))" --default=false; then
        initial_owner=$(get_ethereum_address "Initial contract owner")
    else
        initial_owner=$SIGNER
    fi
    clear
}

set_impl_id() {
    show_title "$title" "> Set implementation ID <"
    if gum confirm "Override default implementation?" --default=false; then
        impl_id=$(get_numeric_input "Enter implementation ID")
        clear
    else
        # when using impl_id=0, the contract will fallback to the default implementation
        impl_id=0
    fi
}

set_global_wallet_limit() {
    if [ -z "$global_wallet_limit" ]; then
        show_title "$title" "> Enter the global wallet limit <"
        global_wallet_limit=$(get_numeric_input "Enter global wallet limit")
        check_input "$global_wallet_limit" "global wallet limit"
        clear
    fi
}

set_mintable() {
    if [ -z "$mintable" ]; then
        show_title "$title" "> Set mintable <"
        if gum confirm "Set mintable?" --default=false; then
            mintable=true
        else
            mintable=false
        fi
        clear
    fi
}

set_cosigner_address() {
    if [ -z "$cosigner_address" ]; then
        show_title "$title" "> Enter cosigner address <"
        cosigner=$(get_ethereum_address "Enter cosigner address")
        check_input "$cosigner" "cosigner address"
        clear
    fi
}

set_timestamp_expiry() {
    if [ -z "$timestamp_expiry" ]; then
        show_title "$title" "> Enter the timestamp expiry <"
        timestamp_expiry=$(get_numeric_input "Enter timestamp expiry in seconds")
        check_input "$timestamp_expiry" "timestamp expiry"
        clear
    fi
}

set_new_owner() {
    show_title "$title" "> Enter new owner address <"
    new_owner=$(get_ethereum_address "Enter new owner address")
    check_input "$new_owner" "new owner address"
    clear
}

set_token_uri_suffix() {
    if [ -z "$token_uri_suffix" ]; then
        show_title "$title" "> Set token URI suffix <"
        if gum confirm "Override default token URI suffix? ($DEFAULT_TOKEN_URI_SUFFIX)" --default=false; then
            token_uri_suffix=$(gum input --placeholder ".json")
        else
            token_uri_suffix=$DEFAULT_TOKEN_URI_SUFFIX
        fi
        clear
    fi
}

set_1155_uri() {
    if [ -z "$uri" ]; then
        show_title "$title" "> Enter new URI <"
        uri=$(gum input --placeholder "Enter new URI")
        check_input "$uri" "URI"
        clear
    fi
}

set_receiver_address() {
    if [ -z "$receiver" ]; then
        show_title "$title" "> Enter receiver address <"
        receiver=$(get_ethereum_address "Enter receiver address")
        check_input "$receiver" "receiver address"
        clear
    fi
}

set_fee_numerator() {
    if [ -z "$fee_numerator" ]; then
        show_title "$title" "> Enter fee numerator <"
        echo "Notice: The fee numerator is a number from 0 to 10000."
        echo "It shows the royalty fee as a percentage."
        echo "For example, 1000 means 10%, 100 means 1%, and 0 means 0%."
        echo ""

        fee_numerator=$(get_numeric_input "Enter fee numerator")
        check_input "$fee_numerator" "fee numerator"
        clear
    fi
}

set_quantity() {
    show_title "$title" "> Enter quantity <"
    quantity=$(get_numeric_input "Enter quantity")
    check_input "$quantity" "quantity"
    clear
}

set_authorized_minter() {
    show_title "$title" "> Enter minter address <"
    minter=$(get_ethereum_address "Enter minter address")
    check_input "$minter" "minter address"
    clear
}
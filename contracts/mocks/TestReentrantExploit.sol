//SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "../nft/erc721m/ERC721M.sol";

contract TestReentrantExploit {
    address private _targetContract;

    constructor(address target) {
        _targetContract = target;
    }

    function exploit(
        uint32 qty,
        bytes32[] calldata proof,
        uint64 timestamp,
        bytes calldata signature
    ) public payable {
        ERC721M(_targetContract).mint{value: msg.value}(
            qty,
            proof,
            timestamp,
            signature
        );
    }

    function onERC721Received(
        address operator,
        address, // unused param: from
        uint256, // unused param: tokenId
        bytes calldata // unused param: data
    ) public payable returns (bytes4) {
        bytes32[] memory proof;
        ERC721M(_targetContract).mint{value: msg.value}(1, proof, 0, "");
        return ERC721A__IERC721Receiver(operator).onERC721Received.selector;
    }
}
